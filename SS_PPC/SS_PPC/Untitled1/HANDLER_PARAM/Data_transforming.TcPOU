<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Data_transforming" Id="{4f23abf8-42c1-445e-a248-63ce2fa2e3d3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Data_transforming
VAR_INPUT
	Number_of_parameter: 		INT;
	Description: 				STRING;
	Process_variable: 			REAL;
	Word_Process_Variable: 		WORD;
	Word_Web_Variable:			WORD;
	Web_variable: 				REAL;
	Modbus_variable: 			INT;
	R_W_mode: 					REAL;
	Scale: 						REAL;
	Min_range: 					REAL;
	Max_range: 					REAL;
	Default_val: 				REAL;
END_VAR
VAR_OUTPUT
	Process_variable_out: 		REAL;
	Process_variable_word_out: 	WORD;
	Process_variable_BOOL_out: 	BOOL;
	Process_variable_INT_out:	INT;
	Process_variable_BYTE_out:	BYTE;
	Process_variable_UINT_out:	UINT;
	Web_variable_out: 			REAL;
	Modbus_variable_out: 		INT;
END_VAR	
VAR
	Modbus_REAL : 				REAL;
	Modbus_Byte : 				BYTE;
	Proces_Variable_Word: 		WORD;
	Proces_Variable_Byte:		BYTE;
	Byte_Web_Variable: 			BYTE;
	Byte_Modbus_Variable: 		BYTE;
	I: 							INT;
	R_W_Mode_String: 			STRING;
	
	BYTE_EXTRACTION_1:			BYTE_EXTRACTION;
	BYTE_EXTRACTION_2:			BYTE_EXTRACTION;
	BYTE_UNION_1:				BYTE_UNION;
	Control_Byte:				BYTE;
	Status_Byte:				BYTE;
	Real_Control_Byte:			REAL;
	Real_Status_Byte:			REAL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(****************************************************************************************************

Function to control the process variable from WEBSERVER or MODBUS. Also applies scales for the MB

******************************************************************************************************)

// First of all, it is necessary to know if the variable is read or write
IF R_W_mode = R_W THEN
	
	IF Data_Handling.Init_Data_Handling = FALSE THEN
	
		// Check if the control is by webserver or by Modbus (in this case webserver)
		IF COMMS_VAR.Control_COMMS = 0 THEN
			
			// Compare if the web variable is different than the process variable
			IF Web_variable <> Process_variable THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_of_parameter;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := Process_variable;
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Web_variable >= Min_range AND Web_variable <= Max_range THEN
					Process_variable := Web_variable;
				ELSE
					Web_variable := Process_variable;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := Process_variable;
			
			END_IF
			
		ELSE
		
			// When the control is by Modbus, first of all, it is necessary scale the Modbus Variable
			Modbus_REAL := (INT_TO_REAL(Modbus_variable)) * Scale;
			
			// Compare if the Modbus variable is different than the process variable
			IF Modbus_REAL <> Process_variable THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_of_parameter;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := Process_variable;
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Modbus_REAL >= Min_range AND Modbus_REAL < (Max_range + scale) THEN
					Process_variable := Modbus_REAL;
				ELSE
					Modbus_REAL := Process_variable;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := Process_variable;
			
			END_IF
			
		END_IF
	ELSE
	
		Modbus_REAL := Process_variable;
		Web_variable := Process_variable;
		
	END_IF
	
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF R_W_mode = R_W_STATUS THEN
	
	Proces_Variable_Word:= REAL_TO_WORD(Process_Variable);

	Byte_Web_Variable:= REAL_TO_BYTE(Web_variable);
	Byte_Modbus_Variable:= REAL_TO_BYTE(Modbus_variable);
	
	BYTE_EXTRACTION_1(	Divisible_Word:= Proces_Variable_Word,
						Upper:= FALSE,
						Selected_Byte=> Control_Byte,
					 );
	
	BYTE_EXTRACTION_2(	Divisible_Word:= Proces_Variable_Word,
						Upper:= TRUE,
						Selected_Byte=> Status_Byte,
					 );	

					
	
	IF Data_Handling.Init_Data_Handling = FALSE THEN
	
		// Check if the control is by webserver or by Modbus (in this case webserver)
		IF COMMS_VAR.Control_COMMS = 0 THEN
			
			// Compare if the web variable is different than the process variable
			IF Byte_Web_variable <> Control_Byte THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_of_parameter;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := BYTE_TO_REAL (Control_Byte);
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Byte_Web_Variable >= Min_range AND Byte_Web_Variable <= Max_range THEN
					Control_Byte := Byte_Web_Variable;
				ELSE
					Byte_Web_Variable := Control_Byte;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := BYTE_TO_REAL(Byte_Web_Variable);
			
			END_IF
			
		ELSE
		
			// When the control is by Modbus, first of all, it is necessary scale the Modbus Variable
			Modbus_Byte := Byte_Modbus_Variable;
			
			// Compare if the Modbus variable is different than the process variable
			IF Modbus_Byte <> Control_Byte THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_of_parameter;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := BYTE_TO_REAL(Control_Byte);
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Modbus_Byte >= Min_range AND Modbus_Byte <= Max_range THEN
					Control_Byte := Modbus_Byte;
				ELSE
					Modbus_Byte := Control_Byte;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := BYTE_TO_REAL(Control_Byte);
			
			END_IF
			
		END_IF
	ELSE
	
		Modbus_REAL := Process_variable;
		Web_variable := Process_variable;
		
		
		
	END_IF
	
	BYTE_UNION_1(	Upper_Byte:= Status_Byte,
					Lower_Byte:= Control_Byte,
					United_Word=> Proces_Variable_Word);

	Process_Variable:= WORD_TO_REAL(Proces_Variable_Word);
	
	
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Finally, either Read or Read/Write, and not Read/Write Word, the process variable is written in the Modbus and Web variable
	Process_variable_out:= Process_variable;
	Process_variable_word_out := REAL_TO_WORD(Process_variable);
	Process_variable_BOOL_out:= REAL_TO_BOOL(Process_variable);
	Process_variable_INT_out:= REAL_TO_INT(Process_variable);
	Process_variable_UINT_out:= REAL_TO_UINT(Process_variable);
	Process_variable_BYTE_out:= REAL_TO_BYTE(Process_variable);
	Web_variable_out := Process_variable;
	Modbus_variable_out := REAL_TO_INT(Process_variable / scale);
	// Registering of the parameter that is going to be modified
	//Data_Handling_VAR.Parameter_recording[USER] := ;
	Data_Handling_VAR.Minimum_range_Handling[Number_of_parameter]:= Min_range;
	Data_Handling_VAR.Maximum_range_Handling[Number_of_parameter]:= Max_range;
	Data_Handling_VAR.Description_Handling[Number_of_parameter]:= Description;
	Data_Handling_VAR.Scale_Handling[Number_of_parameter]:= Scale;
	Data_Handling_VAR.Default_Value_Handling[Number_of_parameter]:= Default_val;
	
	IF R_W_mode = 0 THEN
		R_W_Mode_String:= 'READ';
	ELSIF R_W_mode = 1 THEN
		R_W_Mode_String:= 'READ/WRITE';
	ELSIF R_W_mode = 2 THEN
		R_W_Mode_String:= 'READ/WRITE STATUS';	
	END_IF

	Data_Handling_VAR.R_W_Mode_Handling[Number_of_parameter]:= R_W_Mode_String;
	
	
	
// When the user do a initialization, all variables takes the default value
IF Data_Handling_VAR.Init_vars = TRUE THEN
	Process_variable_out := Default_val;
	Web_variable_out := Default_val;
	Modbus_variable_out := REAL_TO_INT(Default_val / scale);
	// Data modification Initializaton	
	//Data_Handling_VAR.Parameter_recording[USER] := ;
	Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := 0;
	Data_Handling_VAR.Parameter_recording[OLD_VALUE] := 0;
	Data_Handling_VAR.Parameter_recording[NEW_VALUE] := 0;
	Data_Handling_VAR.Parameter_recording_String := 'TOTAL INITIALIZATION';
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Data_transforming">
      <LineId Id="10" Count="205" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>