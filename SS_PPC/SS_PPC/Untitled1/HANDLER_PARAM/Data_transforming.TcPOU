<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Data_transforming" Id="{4f23abf8-42c1-445e-a248-63ce2fa2e3d3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Data_transforming
VAR_INPUT
	Number_variable: 			WORD;
	GUI_var: 					REAL;
	Internal_logic_var:			REAL;
	Modbus_variable: 			WORD;
	R_W_mode: 					ReadWrite_Enum;
	Scale: 						REAL;
	Min_val: 					REAL;
	Max_val: 					REAL;
	Def_val: 					REAL;
	Init_flag:					BOOL;
	Vars_initialization:		BOOL;
	Input_source:				BOOL; //TRUE -> Modbus, FALSE -> Web GUI
END_VAR

VAR_OUTPUT
	Process_variable_out: 		REAL;
	Process_variable_word_out: 	WORD;
	Process_variable_BOOL_out: 	BOOL;
	Process_variable_INT_out:	INT;
	Process_variable_BYTE_out:	BYTE;
	Web_variable_out: 			REAL;
	Modbus_variable_out: 		WORD;
END_VAR	

VAR
	Modbus_var_internal : 		REAL;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
***************************************************************************************************

Function to control the process variable from WEBSERVER or MODBUS. Also applies scales for the MB

*****************************************************************************************************
*)

// First of all, it is necessary to know if the variable is read or write
IF R_W_mode = R_W_mode.R_W THEN
	
	IF NOT Init_flag THEN
	
		// Check if the control is by webserver or by Modbus (in this case webserver)
		IF NOT Input_source THEN
			
			// Compare if the web variable is different than the process variable
			IF GUI_var <> Internal_logic_var THEN
				// Checking if the new value is within the range.
				IF 	GUI_var >= Min_val AND GUI_var <= Max_val THEN
					Internal_logic_var := GUI_var;
				ELSE
					GUI_var := Internal_logic_var;
				END_IF
			END_IF
		ELSE
			// When the control is by Modbus apply scaling for decimal figures
			Modbus_var_internal := (WORD_TO_REAL(Modbus_variable)) * Scale;
			// Compare if the Modbus variable is different than the process variable
			IF Modbus_var_internal <> Internal_logic_var THEN
				// Checking if the new value is within the range
				IF 	Modbus_var_internal >= Min_val AND Modbus_var_internal <= Max_val THEN
					Internal_logic_var := Modbus_var_internal;
				ELSE
					Modbus_var_internal := Internal_logic_var;
				END_IF
			
			END_IF
			
		END_IF
	ELSE
	
		Modbus_var_internal := Internal_logic_var;
		GUI_var := Internal_logic_var;
		
	END_IF
	
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(*
IF R_W_mode = R_W_STATUS THEN
	
	Proces_Variable_Word:= REAL_TO_WORD(Internal_logic_var);

	Byte_Web_Variable:= REAL_TO_BYTE(GUI_var);
	Byte_Modbus_Variable:= REAL_TO_BYTE(Modbus_variable);
	
	BYTE_EXTRACTION_1(	Divisible_Word:= Proces_Variable_Word,
						Upper:= FALSE,
						Selected_Byte=> Control_Byte,
					 );
	
	BYTE_EXTRACTION_2(	Divisible_Word:= Proces_Variable_Word,
						Upper:= TRUE,
						Selected_Byte=> Status_Byte,
					 );	

					
	
	IF Data_Handling.Init_Data_Handling = FALSE THEN
	
		// Check if the control is by webserver or by Modbus (in this case webserver)
		IF COMMS_VAR.Control_COMMS = 0 THEN
			
			// Compare if the web variable is different than the process variable
			IF Byte_Web_variable <> Control_Byte THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_variable;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := BYTE_TO_REAL (Control_Byte);
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Byte_Web_Variable >= Min_val AND Byte_Web_Variable <= Max_val THEN
					Control_Byte := Byte_Web_Variable;
				ELSE
					Byte_Web_Variable := Control_Byte;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := BYTE_TO_REAL(Byte_Web_Variable);
			
			END_IF
			
		ELSE
		
			// When the control is by Modbus, first of all, it is necessary scale the Modbus Variable
			Modbus_Byte := Byte_Modbus_Variable;
			
			// Compare if the Modbus variable is different than the process variable
			IF Modbus_Byte <> Control_Byte THEN
				
				// Registering of the parameter that is going to be modified
				//Data_Handling_VAR.Parameter_recording[USER] := ;
				Data_Handling_VAR.Parameter_recording[PARAMETER_NUMBER] := Number_variable;
				Data_Handling_VAR.Parameter_recording[OLD_VALUE] := BYTE_TO_REAL(Control_Byte);
				Data_Handling_VAR.Parameter_recording_String := Description;
			
				// Checking if the new value is withing the range. Is adding +/- scale because the decimal 
				IF 	Modbus_Byte >= Min_val AND Modbus_Byte <= Max_val THEN
					Control_Byte := Modbus_Byte;
				ELSE
					Modbus_Byte := Control_Byte;
				END_IF
				
				// Record the new value modified
				Data_Handling_VAR.Parameter_recording[NEW_VALUE] := BYTE_TO_REAL(Control_Byte);
			
			END_IF
			
		END_IF
	ELSE
	
		Modbus_var_internal := Internal_logic_var;
		GUI_var := Internal_logic_var;
		
		
		
	END_IF
	
	BYTE_UNION_1(	Upper_Byte:= Status_Byte,
					Lower_Byte:= Control_Byte,
					United_Word=> Proces_Variable_Word);

	Internal_logic_var:= WORD_TO_REAL(Proces_Variable_Word);
	
	
END_IF
*)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Finally, either Read or Read/Write, and not Read/Write Word, the process variable is written in the Modbus and Web variable
	Process_variable_out:= Internal_logic_var;
	Process_variable_word_out := REAL_TO_WORD(Internal_logic_var);
	Process_variable_BOOL_out:= REAL_TO_BOOL(Internal_logic_var);
	Process_variable_INT_out:= REAL_TO_INT(Internal_logic_var);
	Process_variable_BYTE_out:= REAL_TO_BYTE(Internal_logic_var);
	Web_variable_out := Internal_logic_var;
	Modbus_variable_out := REAL_TO_WORD(Internal_logic_var / scale);
	
	
// When the user do a initialization, all variables takes the default value
IF Vars_initialization = TRUE THEN
	Process_variable_out := Def_val;
	Web_variable_out := Def_val;
	Modbus_variable_out := REAL_TO_WORD(Def_val / scale);
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Data_transforming">
      <LineId Id="1798" Count="0" />
      <LineId Id="1993" Count="0" />
      <LineId Id="1799" Count="3" />
      <LineId Id="1994" Count="0" />
      <LineId Id="1803" Count="17" />
      <LineId Id="1822" Count="0" />
      <LineId Id="1824" Count="1" />
      <LineId Id="1827" Count="1" />
      <LineId Id="1836" Count="5" />
      <LineId Id="1845" Count="13" />
      <LineId Id="1995" Count="0" />
      <LineId Id="1859" Count="89" />
      <LineId Id="1996" Count="0" />
      <LineId Id="1949" Count="7" />
      <LineId Id="1958" Count="2" />
      <LineId Id="1997" Count="0" />
      <LineId Id="1980" Count="5" />
      <LineId Id="1992" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>