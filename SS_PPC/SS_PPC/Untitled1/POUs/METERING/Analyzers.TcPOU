<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Analyzers" Id="{907aa627-47e3-4482-a979-79b393bfe7d2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Analyzers
VAR
	PM_beck_EL3453:			FB_EL3453_handling;
	
	S_nom_facility_inv:			REAL; //Inverse of Snom [1/kVA]
	V_nom_facility_inv:			REAL; //Inverse of Snom [1/V]
	
	P_inverters:				REAL:= 0; //Sum of Pread from all inverters
	Q_inverters:				REAL:= 0; //Sum of Qread from all inverters
	i:							WORD:= 1;
END_VAR

VAR CONSTANT
	tick_hourly: 				REAL:= 2.78E-7; //ms expressed in hours (how much hours is a tick)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
PM_beck_EL3453(Analyzer_str_out=> GVL_POWERMETER.Power_analyzer);

//Average voltages obtention
GVL_POWERMETER.V_phase_avg_Volt:= AVG_3(GVL_POWERMETER.Power_analyzer.V_L1N_Volt, 
										GVL_POWERMETER.Power_analyzer.V_L2N_Volt, 
										GVL_POWERMETER.Power_analyzer.V_L3N_Volt);
										
GVL_POWERMETER.V_line_avg_Volt:= AVG_3(GVL_POWERMETER.Power_analyzer.V_L1L2_Volt, 
										GVL_POWERMETER.Power_analyzer.V_L2L3_Volt, 
										GVL_POWERMETER.Power_analyzer.V_L3L1_Volt);

//Per unit values obtention - Single-phase powers
GVL_POWERMETER.P_L1_pu:= GVL_POWERMETER.Power_analyzer.P_L1_kW * S_nom_facility_inv;
GVL_POWERMETER.P_L2_pu:= GVL_POWERMETER.Power_analyzer.P_L2_kW * S_nom_facility_inv;
GVL_POWERMETER.P_L3_pu:= GVL_POWERMETER.Power_analyzer.P_L3_kW * S_nom_facility_inv;
GVL_POWERMETER.Q_L1_pu:= GVL_POWERMETER.Power_analyzer.Q_L1_kVAr * S_nom_facility_inv;
GVL_POWERMETER.Q_L2_pu:= GVL_POWERMETER.Power_analyzer.Q_L2_kVAr * S_nom_facility_inv;
GVL_POWERMETER.Q_L3_pu:= GVL_POWERMETER.Power_analyzer.Q_L3_kVAr * S_nom_facility_inv;
GVL_POWERMETER.S_L1_pu:= GVL_POWERMETER.Power_analyzer.S_L1_kVA * S_nom_facility_inv;
GVL_POWERMETER.S_L2_pu:= GVL_POWERMETER.Power_analyzer.S_L2_kVA * S_nom_facility_inv;
GVL_POWERMETER.S_L3_pu:= GVL_POWERMETER.Power_analyzer.S_L3_kVA * S_nom_facility_inv;

//Per unit values obtention - Three-phase powers
GVL_POWERMETER.P_pu:= GVL_POWERMETER.Power_analyzer.P_kW * S_nom_facility_inv;
GVL_POWERMETER.Q_pu:= GVL_POWERMETER.Power_analyzer.Q_kVAr * S_nom_facility_inv;
GVL_POWERMETER.S_pu:= GVL_POWERMETER.Power_analyzer.S_kVA * S_nom_facility_inv;

//Per unit values obtention - Voltages
GVL_POWERMETER.V_line_avg_pu:= GVL_POWERMETER.V_line_avg_Volt * V_nom_facility_inv;
GVL_POWERMETER.V_phase_avg_pu:= GVL_POWERMETER.V_phase_avg_Volt * V_nom_facility_inv;

IF GVL_POWERMETER.V_phase_avg_pu <> 0 THEN
	GVL_POWERMETER.V_L1N_pu:= GVL_POWERMETER.Power_analyzer.V_L1N_Volt / GVL_POWERMETER.V_phase_avg_pu;
	GVL_POWERMETER.V_L2N_pu:= GVL_POWERMETER.Power_analyzer.V_L2N_Volt / GVL_POWERMETER.V_phase_avg_pu;
	GVL_POWERMETER.V_L3N_pu:= GVL_POWERMETER.Power_analyzer.V_L3N_Volt / GVL_POWERMETER.V_phase_avg_pu;
END_IF
	
//Per unit currents obtention
IF (GVL_POWERMETER.V_L1N_pu <> 0) AND (GVL_POWERMETER.Power_analyzer.cos_phi_L1 <> 0) THEN
	GVL_POWERMETER.I_L1_pu:= GVL_POWERMETER.P_L1_pu / (GVL_POWERMETER.V_L1N_pu * GVL_POWERMETER.Power_analyzer.cos_phi_L1);
END_IF
IF (GVL_POWERMETER.V_L2N_pu <> 0) AND (GVL_POWERMETER.Power_analyzer.cos_phi_L2 <> 0) THEN
	GVL_POWERMETER.I_L2_pu:= GVL_POWERMETER.P_L2_pu / (GVL_POWERMETER.V_L2N_pu * GVL_POWERMETER.Power_analyzer.cos_phi_L2);
END_IF
IF (GVL_POWERMETER.V_L3N_pu <> 0) AND (GVL_POWERMETER.Power_analyzer.cos_phi_L3 <> 0) THEN
	GVL_POWERMETER.I_L3_pu:= GVL_POWERMETER.P_L3_pu / (GVL_POWERMETER.V_L3N_pu * GVL_POWERMETER.Power_analyzer.cos_phi_L3);
END_IF
	
//Active energies calculation. It is an infinitesimal addition (an integration of P_measured)
GVL_POWERMETER.Active_er_tot_kWh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.P_kW * tick_hourly) + 
												GVL_POWERMETER.Active_er_tot_kWh;
IF GVL_POWERMETER.Power_analyzer.P_kW  >= 0 THEN
	GVL_POWERMETER.Active_er_pos_kWh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.P_kW * tick_hourly) + 
													GVL_POWERMETER.Active_er_pos_kWh;
ELSE	
	GVL_POWERMETER.Active_er_neg_kWh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.P_kW * tick_hourly) + 
													GVL_POWERMETER.Active_er_neg_kWh;
END_IF
	
//Reactive energies calculation. It is an infinitesimal addition (an integration of Q_measured)
GVL_POWERMETER.React_er_tot_kVArh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.Q_kVAr * tick_hourly) + 
												GVL_POWERMETER.React_er_tot_kVArh;
IF GVL_POWERMETER.Power_analyzer.Q_kVAr >= 0 THEN
	GVL_POWERMETER.React_er_pos_kVArh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.Q_kVAr * tick_hourly) + 
													GVL_POWERMETER.React_er_pos_kVArh;
ELSE
	GVL_POWERMETER.React_er_neg_kVArh:= REAL_TO_LINT(GVL_POWERMETER.Power_analyzer.Q_kVAr * tick_hourly) + 
													GVL_POWERMETER.React_er_neg_kVArh;
END_IF

//Energies reset when desired
IF GVL_POWERMETER.Energies_reset THEN
	GVL_POWERMETER.Active_er_neg_kWh:= 0;
	GVL_POWERMETER.Active_er_pos_kWh:= 0;
	GVL_POWERMETER.Active_er_tot_kWh:= 0;
	GVL_POWERMETER.React_er_neg_kVArh:= 0;
	GVL_POWERMETER.React_er_pos_kVArh:= 0;
	GVL_POWERMETER.React_er_tot_kVArh:= 0;
	
	GVL_POWERMETER.Energies_reset:= FALSE;
END_IF

//Powermeter variables publishing via Modbus
MEMCPY(destAddr:= ADR(GVL_HANDLER.Modbus_srv_vars[P_L1_kW]), srcAddr:= ADR(GVL_POWERMETER.Power_analyzer), n:= SIZEOF(GVL_POWERMETER.Power_analyzer));
		
//Config calling
METER_BOARD_CFG();

//Addition of P and Q from inverters
FOR i:=1 TO GVL_CONV_COMMS.NUMBER_CONVERTERS DO;
	P_inverters:= P_inverters + GVL_CONV_COMMS.P_Measured[i];
	Q_inverters:= Q_inverters + GVL_CONV_COMMS.Q_Measured[i];
END_FOR

GVL_POWERMETER.P_converters_tot:= P_inverters;
GVL_POWERMETER.Q_converters_tot:= Q_inverters;
P_inverters:= 0;
Q_inverters:= 0;]]></ST>
    </Implementation>
    <LineIds Name="Analyzers">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="160" Count="3" />
      <LineId Id="165" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="18" Count="9" />
      <LineId Id="74" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="185" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="202" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="206" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="131" Count="20" />
      <LineId Id="62" Count="2" />
      <LineId Id="105" Count="4" />
      <LineId Id="71" Count="2" />
      <LineId Id="46" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>